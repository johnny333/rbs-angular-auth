{"version":3,"sources":["main.litcoffee","service/TokenManager.litcoffee","service/RuleParser.litcoffee","service/JWT.litcoffee","interceptor/TokenInterceptor.litcoffee","interceptor/SecurityErrorInterceptor.litcoffee","controller/SecurityCtrl.litcoffee","config/router.litcoffee","config/module.litcoffee"],"names":[],"mappings":"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","file":"rbs-angular-auth.js","sourcesContent":["Główny moduł:\n\n    angular.module 'rbs-angular-auth', [\n      'ngStorage'\n      'rbs-angular-core'\n    ]\n\nModuł integracji z `ui-router`:\n\n    angular.module 'rbs-angular-auth-ui-router', [\n      'ui.router'\n      'rbs-angular-auth'\n    ]\n\nModuł zawierający przykłady wykorzystywane w dokumentacji:\n\n    angular.module 'rbs-angular-auth-samples', [\n      'rbs-angular-auth-samples'\n    ]\n","# `TokenManager`\n\nZarządzanie tokenem JWT.\n\n    (angular.module 'rbs-angular-auth').factory 'TokenManager', [\n      '$log'\n      '$localStorage'\n      '$rootScope'\n      'Configuration'\n      ($log, $localStorage, $rootScope, Configuration) ->\n\n        JWT_STORAGE_KEY = Configuration.JWT_STORAGE_KEY\n        JWT_STORE_EVENT = Configuration.JWT_STORE_EVENT\n        JWT_CLEAR_EVENT = Configuration.JWT_CLEAR_EVENT\n        JWT_INJECTOR    = Configuration.JWT_INJECTOR\n        JWT_EXTRACTOR   = Configuration.JWT_EXTRACTOR\n\n        class TokenManager\n\nToken zapisywany jest do `localStorage`.\n\n          storeRaw: (token) ->\n            if @getRaw() isnt token\n              $log.debug 'Store JWT token: ', token\n              $localStorage[JWT_STORAGE_KEY] = token\n              $rootScope.$broadcast JWT_STORE_EVENT, this, token\n\nToken pobierany jest z `localStorage`.\n\n          getRaw: () ->\n            $localStorage[JWT_STORAGE_KEY]\n\nToken jest usuwany `localStorage`.\n\n          clear: () ->\n            token = @getRaw()\n            $log.debug 'Cleared JWT token: ', token\n            delete $localStorage[JWT_STORAGE_KEY]\n            $rootScope.$broadcast JWT_CLEAR_EVENT, this, token\n\nToken przekazujemy w nagłówku `Authorization` żądania, z prefiksem \"Bearer\".\n\n          inject: (request, rawToken) ->\n            JWT_INJECTOR request, rawToken\n            request\n\nToken wyciągamy z nagłówka `Authorization` odpowiedzi, z prefiksem \"Bearer\".\n\n          extract: (response) ->\n            JWT_EXTRACTOR response\n\n        new TokenManager()\n    ]\n","# `RuleParser`\n\nParser reguł autoryzacyjnych. Reguły mogą zawierać nazwy ról oraz znaki `(`, `)`, `|`, `&`.\n\n    class Operator\n\n      constructor: (@permissions...) ->\n\n      @evalPermission: (principal, permissionCheck) ->\n        (permission) ->\n          if angular.isString permission\n            permissionCheck(principal, permission)\n          else if angular.isFunction permission?.eval\n            permission.eval principal, permissionCheck\n\n    class And extends Operator\n\n      eval: (principal, permissionCheck) ->\n        _.every @permissions, Operator.evalPermission(principal, permissionCheck)\n\n      toJSON: () ->\n        \"and\": @permissions\n\n    class Or extends Operator\n\n      eval: (principal, permissionCheck) ->\n        _.some @permissions, Operator.evalPermission(principal, permissionCheck)\n\n      toJSON: () ->\n        \"or\": @permissions\n\n    alt = Parsimmon.alt\n    seq = Parsimmon.seq\n    lazy = Parsimmon.lazy\n    regex = Parsimmon.regex\n    string = Parsimmon.string\n    optWhitespace = Parsimmon.optWhitespace\n\n    lexeme = (p) -> p.skip optWhitespace\n\n    lparen = lexeme string '('\n    rparen = lexeme string ')'\n    opOr = lexeme string '|'\n    opAnd = lexeme string '&'\n    member = lexeme regex /[0-9a-z_\\-\\.]+/i\n\n    rule = lazy 'rule', ->\n      seq(conjunction, disjunctionNext.many()).map ([first, more]) -> new Or(first, more...)\n    subrule = lparen.then(rule).skip(rparen).or(member)\n    conjunctionNext = opAnd.then(subrule)\n    conjunction = seq(subrule, conjunctionNext.many()).map ([first, more]) ->\n      if more.length\n        new And(first, more...)\n      else\n        first\n    disjunctionNext = opOr.then(conjunction) # plus\n    disjunction = seq(subrule, disjunctionNext.many()).map ([first, more]) ->\n      if more.length\n        new Or(first, more...)\n      else\n        first\n\n    class RuleParser\n\n      @parse: _.memoize (r) -> rule.parse r?.trim() or ''\n\n    (angular.module 'rbs-angular-auth').factory 'RuleParser', [\n      '$log'\n      ($log) -> RuleParser\n    ]\n","# `JWT`\n\nFormater i parser tokenu JWT.\n\n    (angular.module 'rbs-angular-auth').factory 'JWT', [\n      '$log'\n      'ErrorFactory'\n      'Configuration'\n      ($log, ErrorFactory, Configuration) ->\n\n        class JWT\n\nFormatowanie tokenu składającego się z nagłówka `header` i ciała `payload` z opcjonalnym podpisem kluczem `key`.\n\n          @format: (header, payload, key) ->\n            return undefined unless (angular.isObject header) and (angular.isObject payload) and key?\n            KJUR.jws.JWS.sign null, angular.toJson(header), angular.toJson(payload), key\n\nParsowanie tokenu z opcjonalną weryfikacją podpisu kluczem `verifyKey`.\n\n          @parse: (token, verifyKey) ->\n            return undefined unless token?\n            [header, payload, signature] = token.split '.'\n            ok = if verifyKey\n              if angular.isNumber verifyKey\n                verifyKey = '' + verifyKey\n              KJUR.jws.JWS.verify(token, verifyKey)\n            else true\n            unless ok\n              ErrorFactory.throw Configuration.ERROR_STATUS.NOT_AUTHORIZED,\n               Configuration.ERROR_CODE.INVALID_TOKEN_SIGNATURE,\n               \"Invalid JWT token signature\"\n            {\n              header: angular.fromJson KJUR.jws.JWS.readSafeJSONString(b64utos(header))\n              payload: angular.fromJson KJUR.jws.JWS.readSafeJSONString(b64utos(payload))\n            }\n\n        JWT\n    ]\n","# `TokenInterceptor`\n\nInterceptor `$http`, który:\n\n    (angular.module 'rbs-angular-auth').factory 'TokenInterceptor', [\n      '$log'\n      '$q'\n      'TokenManager'\n      'Configuration'\n      ($log, $q, TokenManager, cfg) ->\n\n        class TokenInterceptor\n\n          isEnabled: (config) ->\n            if angular.isString cfg.HTTP_URL_FILTER\n              S(config.url).startsWith(cfg.HTTP_URL_FILTER)\n            else if angular.isFunction cfg.HTTP_URL_FILTER\n              cfg.HTTP_URL_FILTER config.url\n            else if _.isRegExp cfg.HTTP_URL_FILTER\n              cfg.HTTP_URL_FILTER.test config.url\n            else true\n\n* odczytuje token `JWT` z żądania (`TokenManager`.`extract`) i zapisuje go  (`TokenManager`.`storeRaw`):\n\n          response: (response) =>\n            if @isEnabled response.config\n              token = TokenManager.extract(response)\n              if token?\n                TokenManager.storeRaw(token)\n            response\n\n* odczytuje zapisany token `JWT` (`TokenManager`.`getRaw`) i przekazuje go w każdym żądaniu\n  (`TokenManager`.`inject`):\n\n          request: (config) =>\n            if @isEnabled config\n              fromParam = config.params?[cfg.JWT_REQUEST_PARAM]\n              token = if fromParam?\n                delete config.params[cfg.JWT_REQUEST_PARAM]\n                fromParam\n              else\n                TokenManager.getRaw()\n              if token?\n                TokenManager.inject(config, token) or config\n              else\n                config\n            else\n              config\n\n        new TokenInterceptor()\n    ]\n","# `SecurityErrorInterceptor`\n\nInterceptor `$http` przechwytujący błędy HTTP związane z autoryzacją i publikujące je w formie zdarzeń w `$rootScope`.\n\n    (angular.module 'rbs-angular-auth').factory 'SecurityErrorInterceptor', [\n      '$log'\n      '$rootScope'\n      '$q'\n      'Configuration'\n      'ErrorFactory'\n      ($log, $rootScope, $q, cfg, ErrorFactory) ->\n\n        class SecurityErrorInterceptor\n\n          responseError: (rejection) ->\n\nKody błędów, które mają być obsługiwane (domyślnie `401`, `403`) można ustawić w `ConfigurationProvider`\npod kluczem `HTTP_AUTHORIZATION_ERROR_STATUS`.\n\n            error = if rejection.status in (cfg.HTTP_AUTHORIZATION_ERROR_STATUS or [])\n\nW przypadku błędu zawiera wyjątek `ApplicationError` z ustawionymi polami:\n* `status` - status HTTP błędu\n* `code` - wartość ustawiona w `ConfigurationProvider` - `ERROR_CODE`.`NO_HTTP_AUTHORIZATION`\n* `message` - oryginalna wiadomość zwrócona z backendu lub domyślny komunikat\n* `cause` - oryginalny błąd\n\n              errorMessage = if angular.isString rejection.data\n                rejection.data\n              else if angular.isString rejection.data?.message\n                rejection.data.message\n              else 'Server returned authorization error'\n\n              error = ErrorFactory.create rejection.status,\n               cfg.ERROR_CODE.NO_HTTP_AUTHORIZATION,\n               errorMessage,\n               rejection\n\nNazwa zdarzenia wysyłanego w przypadku błędu konfigurowana jest pod kluczem `HTTP_AUTHORIZATION_ERROR_EVENT`. Domyślnie:\n`rbs-angular-auth-http-error`\n\n              $rootScope.$broadcast cfg.HTTP_AUTHORIZATION_ERROR_EVENT, error\n              error\n            else rejection\n            $q.reject error\n\n        new SecurityErrorInterceptor()\n    ]\n","# `SecurityCtrl`\n\nKontroler bezpieczeństwa\n\n    (angular.module 'rbs-angular-auth').service 'SecurityCtrl', [\n      '$log'\n      '$q'\n      '$rootScope'\n      'Configuration'\n      'ErrorFactory'\n      'JWT'\n      'RuleParser'\n      'TokenManager'\n      ($log, $q, $rootScope, cfg, ErrorFactory, JWT, RuleParser, TokenManager) ->\n\n        class SecurityCtrl\n\n          constructor: () ->\n\nTo pole zawsze zawierać będzie auktualny obiekt `principal`:\n\n            @principal = undefined\n\nPole zawiera zdekodowany `payload` tokena `JWT`:\n\n            @payload = undefined\n\nPonieważ metody `isAuthorized` oraz `isAuthenticated` korzystają z funkcji `_`.`memoize` - czyścimy cache metod w\nmomencie zmiany stanu tokena w `TokenManager`.\n\n            $rootScope.$on cfg.JWT_STORE_EVENT, => @initialize()\n            $rootScope.$on cfg.JWT_CLEAR_EVENT, => @initialize()\n            @initialize()\n\n          clearCaches: ->\n            @isAuthorized.cache.clear?()\n            @$readPrincipal.cache.clear?()\n            @$readPayload.cache.clear?()\n\nPrzy uruchomieniu aplikacji odczytujemy stan:\n\n          initialize: ->\n\n            @clearCaches()\n\n            @payload = @$readPayload()\n\n            onSuccess = (principal) =>\n              @clearCaches()\n              @principal = principal\n\n            onFailure = =>\n              @clearCaches()\n              @principal = undefined\n\n            @getPrincipal().then onSuccess, onFailure\n\nKonwersja pobiera `principal` na podstawie `payload` tokena `JWT` (przeznaczone do rozszerzenia):\n\n          $fetchPrincipal: (payload) -> payload\n\nOdczytanie payloadu `JWT` (synchroniczne):\n\n          $$readPayload: () ->\n            rawToken = TokenManager.getRaw()\n            token = try\n              JWT.parse rawToken\n            catch error\n              $log.error \"Can't parse token:\", rawToken, error\n              TokenManager.clear()\n            if token?\n              {header, payload} = token\n              payload\n\n          $readPayload: _.memoize SecurityCtrl::$$readPayload, -> 'SecurityCtrl-readPayload'\n\nOdczytanie aktualnego `principal` (asynchroniczne):\n\n          $$readPrincipal: () ->\n            payload = @$readPayload()\n            if payload?\n              $q.when @$fetchPrincipal payload\n            else\n              $q.reject()\n\nmetoda korzysta z funkcji `_`.`memoize`\n\n          $readPrincipal: _.memoize SecurityCtrl::$$readPrincipal, -> 'SecurityCtrl-readPrincipal'\n\nPobranie `principal`:\n\n          getPrincipal: () -> @$readPrincipal()\n\nTest czy aktualnie jest zalogowany `principal`:\n\n          isAuthenticated: () ->\n            @payload?\n\nSprawdzenie czy `principal` posiada uprawnienia okreśone regułą `rule`. Metoda korzysta z parametru konfiguracyjnego\n`JWT_PERMISSION_CHECK`:\n\n          $$isAuthorized: (rule, payload) ->\n            unless rule?\n              payload?\n            else if payload? and angular.isFunction cfg.JWT_PERMISSION_CHECK\n              parsed = RuleParser.parse(rule)\n              if parsed.status\n                parsed.value.eval(payload, cfg.JWT_PERMISSION_CHECK) == true\n              else\n                ErrorFactory.throw cfg.ERROR_STATUS.BAD_REQUEST,\n                 cfg.ERROR_CODE.INVALID_AUTHORIZATION_RULE,\n                 \"Can't parse authorization rule: \\\"#{rule}\\\"\"\n            else false\n\n          $isAuthorized: (rule) ->\n            @$$isAuthorized rule, @payload\n\nmetoda korzysta z funkcji `_`.`memoize`\n\n          isAuthorized: _.memoize SecurityCtrl::$isAuthorized, (rule) -> rule or 'SecurityCtrl-isAuthorized'\n\nWylogowanie:\n\n          logout: () ->\n            TokenManager.clear()\n\n        SecurityCtrl\n\n    ]\n","# Konfiguracja modułu `ui-router`\n\n    (angular.module 'rbs-angular-auth-ui-router').config [\n      '$httpProvider'\n      'ConfigurationProvider'\n      ($httpProvider, ConfigurationProvider) ->\n\n## Klucz pod jakim przechowywana jest konfiguracja autoryzacji w danych stanu `ui-router`:\n\n        ConfigurationProvider.put 'DATA_AUTHORIZATION_KEY', 'authorize'\n\n## Nazwa zdarzenia publikowanego, gdy wystąpi błąd autoryzacji przy zmianie stanu:\n\n        ConfigurationProvider.put 'ROUTER_AUTHORIZATION_ERROR_EVENT', 'rbs-angular-auth-ui-router-error'\n\n## Kody błędów:\n\n        ConfigurationProvider.put 'ERROR_CODE',\n          NO_ROUTE_AUTHORIZATION: '0a38f636-c123-4cd5-9249-ad9b6c6724a9'\n\n    ]\n\n    (angular.module 'rbs-angular-auth-ui-router').run [\n      '$log'\n      '$rootScope'\n      'Configuration'\n      'ErrorFactory'\n      'SecurityCtrlInstance'\n      ($log, $rootScope, cfg, ErrorFactory, SecurityCtrlInstance) ->\n\n        $rootScope.$on '$stateChangeStart', (event, toState, toParams, fromState, fromParams) ->\n\n          authorization = toState.data?[cfg.DATA_AUTHORIZATION_KEY]\n\n          if authorization\n\n            error = if authorization is true\n              try\n                unless SecurityCtrlInstance.isAuthenticated()\n                  ErrorFactory.create cfg.ERROR_STATUS.NOT_AUTHORIZED,\n                   cfg.ERROR_CODE.NO_ROUTE_AUTHORIZATION,\n                   \"State \\\"#{toState.name}\\\" is guarded with authorization rule: \\\"#{authorization}\\\", which is not\" +\n                    \" matched\"\n              catch error\n                error\n            else if angular.isString authorization\n              try\n                unless SecurityCtrlInstance.isAuthorized(authorization)\n                  ErrorFactory.create cfg.ERROR_STATUS.NOT_AUTHORIZED,\n                   cfg.ERROR_CODE.NO_ROUTE_AUTHORIZATION,\n                   \"State \\\"#{toState.name}\\\" is guarded with authorization rule: \\\"#{authorization}\\\", which is not\" +\n                    \" matched\"\n              catch error\n                error\n\n            if error?\n              $rootScope.$broadcast cfg.ROUTER_AUTHORIZATION_ERROR_EVENT, toState, toParams, fromState, fromParams, error\n              event.preventDefault()\n\n    ]","# Konfiguracja modułu\n\n    AUTHORIZATION_HEADER = 'Authorization'\n    BEARER_REGEX = /Bearer ([0-9A-Za-z\\.\\-_]+)/\n    BEARER_TEMPLATE = \"\"\"Bearer {{token}}\"\"\"\n\n## Funkcja wstrzykująca token do żądania na podstawie szablonu\n\nFabryka funkcji przyjmuje argumenty:\n1. `header` - nazwa nagłówka w jakim przekazywany jest token - domyślnie `Authorization`\n1. `template` - szablon formatujący nagłówek - może być w formacie:\n  * `function`(`string`): `string` - funkcja formatująca treść nagłówka której argumentem jest token\n  * `string` - szablon `handlebars` - token podstawiony jest pod nazwą zmiennej `token` - domyślnie: `Bearer {{token}}`\n\nZwracana jest funkcja, którą można następnie użyć do konfiguracji parametru `JWT_INJECTOR`.\n\n    TemplateTokenInjector = (header = AUTHORIZATION_HEADER, template = BEARER_TEMPLATE) ->\n      (request, rawToken) ->\n        request.headers[header] = if angular.isString template\n          S(template).template({ token: rawToken, rawToken: rawToken }).s\n        else if angular.isFunction template\n          template rawToken\n        else rawToken\n\n    (angular.module 'rbs-angular-auth').constant 'TemplateTokenInjector', TemplateTokenInjector\n\n## Funkcja wyciągająca token z odpowiedzi za pomocą wyrażenia regularnego\n\nFabryka funkcji przyjmuje argumenty:\n1. `header` - nazwa nagłówka w jakim przekazywany jest token - domyślnie `Authorization`\n1. `template` - szablon nagłówka - może być w formie:\n  * `regex` - wyrażenie regularne które wyciąga token z nagłówka w 1. grupie\n  * `function`(): `string` - funkcja wyciągająca token z nagłówka\n\nZwracana jest funkcja, którą można następnie użyć do konfiguracji parametru `JWT_EXTRACTOR`\n\n    TemplateTokenExtractor = (headerName = AUTHORIZATION_HEADER, template = BEARER_REGEX) ->\n      (response) ->\n        header = response.headers headerName\n        if header?\n          if _.isRegExp template\n            match = template.exec header\n            if angular.isArray match\n              [whole, rawToken] = match\n              rawToken\n          else if angular.isFunction template\n            template header\n          else header\n\n    (angular.module 'rbs-angular-auth').constant 'TemplateTokenExtractor', TemplateTokenExtractor\n\n    (angular.module 'rbs-angular-auth').config [\n      '$httpProvider'\n      'ConfigurationProvider'\n      'TemplateTokenExtractor'\n      'TemplateTokenInjector'\n      ($httpProvider, ConfigurationProvider, TemplateTokenExtractor, TemplateTokenInjector) ->\n\n## Klucz pod jakim przechowywany jest w `$localStorage` token `JWT`:\n\n        ConfigurationProvider.put 'JWT_STORAGE_KEY', 'JWT'\n\n## Klucz pod jakim przechowywany jest w `$rootScope` kontroler `SecurityCtrl`:\n\n        ConfigurationProvider.put 'SECURITY_CONTROLLER_AS', 'security'\n\n## Nazwa zdarzenia publikowanego, gdy ustawiony zostanie nowy token `JWT`:\n\n        ConfigurationProvider.put 'JWT_STORE_EVENT', 'rbs-angular-auth-JWT-store'\n\n## Nazwa zdarzenia publikowanego, gdy usunięty zostanie token `JWT`:\n\n        ConfigurationProvider.put 'JWT_CLEAR_EVENT', 'rbs-angular-auth-JWT-clear'\n\n## Filtr URL dla których aktywowany jest `TokenInterceptor` - regex lub funkcja:\n\n        ConfigurationProvider.put 'HTTP_URL_FILTER', -> true\n\n## Statusy błędów, które są publikowane `$rootScope`:\n\n        ConfigurationProvider.put 'HTTP_AUTHORIZATION_ERROR_STATUS', [401, 403]\n\n## Nazwa zdarzenia publikowanego, gdy wystąpi błąd autoryzacji w `$http`:\n\n        ConfigurationProvider.put 'HTTP_AUTHORIZATION_ERROR_EVENT', 'rbs-angular-auth-http-error'\n\n## Funkcja sprawdzająca obecność uprawnienia `permission` w obiekcie `payload`\n\nFunkcja przyjmuje argumenty:\n\n* payload - payload tokenu `JWT`\n* permission - uprawnienie\n\ni zwraca `boolean`\n\n        ConfigurationProvider.put 'JWT_PERMISSION_CHECK', _.constant false\n\n## Funkcja wstrzykująca token `JWT` do żądania:\n\n        ConfigurationProvider.put 'JWT_INJECTOR', TemplateTokenInjector()\n\n## Funkcja wyciągająca token `JWT` z odpowiedzi:\n\n        ConfigurationProvider.put 'JWT_EXTRACTOR', TemplateTokenExtractor()\n\n## Statusy błędów:\n\n        ConfigurationProvider.put 'ERROR_STATUS',\n          BAD_REQUEST: 400\n          NOT_AUTHORIZED: 401\n          FORBIDDEN: 403\n\n## Kody błędów:\n\n        ConfigurationProvider.put 'ERROR_CODE',\n          INVALID_TOKEN_SIGNATURE: '3b2600fb-8d22-497c-a49b-3dab0b501f04'\n          INVALID_AUTHORIZATION_RULE: '6af67e3a-23bc-4e5d-a46b-839e1ad7425f'\n          NO_HTTP_AUTHORIZATION: 'c472ad9e-d303-4880-aa92-f788c2b0030e'\n\n## Parametr żądania pod którym można przekazać token `JWT`:\n\n        ConfigurationProvider.put 'JWT_REQUEST_PARAM', 'access_token'\n\n## `SecurityErrorInterceptor` publikuje zdarzenia związane z błędami autoryzacji w `$rootScope`:\n\n        $httpProvider.interceptors.push 'SecurityErrorInterceptor'\n\n## `TokenInterceptor` dopisuje token JWT do żądania oraz odczytuje go z odpowiedzi:\n\n        $httpProvider.interceptors.push 'TokenInterceptor'\n\n    ]\n\nPo uruchomieniu modułu publikujemy `SecurityCtrl` w `$rootScope`\n\n    (angular.module 'rbs-angular-auth').factory 'SecurityCtrlInstance', [\n      '$log'\n      'SecurityCtrl'\n      ($log, SecurityCtrl) -> new SecurityCtrl()\n    ]\n\n    (angular.module 'rbs-angular-auth').run [\n      '$log'\n      '$rootScope'\n      'Configuration'\n      'SecurityCtrlInstance'\n      ($log, $rootScope, cfg, SecurityCtrlInstance) ->\n\n        $rootScope[cfg.SECURITY_CONTROLLER_AS] = SecurityCtrlInstance\n    ]\n"]}